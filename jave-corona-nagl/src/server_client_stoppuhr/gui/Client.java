package server_client_stoppuhr.gui;

import com.google.gson.Gson;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.List;
import server_client_stoppuhr.Request;
import server_client_stoppuhr.Response;
import server_client_stoppuhr.Server;

/**
 *
 * @author Nagl
 */
public class Client extends javax.swing.JFrame {

    private Server server = new Server();
    private Request req = new Request();
    private MyConnectionWorker worker;
    /**
     * Creates new form Client
     */
    public Client() {
	initComponents();
	
	setTitle("PLF3- Stopwatch");
	setLocationRelativeTo(this);
	setMinimumSize(new Dimension(300,250));
	setSize(400,300);
	
	
	jButClear.setEnabled(false);
	jButDisconnnect.setEnabled(false);
	jButStart.setEnabled(false);
	jButStop.setEnabled(false);
	jButEnd.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanCenter = new javax.swing.JPanel();
        jPanTime = new javax.swing.JPanel();
        jLabTime = new javax.swing.JLabel();
        jPanNorth = new javax.swing.JPanel();
        jlabRefreshrate = new javax.swing.JLabel();
        jSliTime = new javax.swing.JSlider();
        jlab1ms = new javax.swing.JLabel();
        jPanEast = new javax.swing.JPanel();
        jButConnection = new javax.swing.JButton();
        jButDisconnnect = new javax.swing.JButton();
        jButStart = new javax.swing.JButton();
        jButStop = new javax.swing.JButton();
        jButClear = new javax.swing.JButton();
        jButEnd = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabTime.setFont(new java.awt.Font("Lucida Grande", 0, 48)); // NOI18N
        jLabTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabTime.setText("0.000");
        jLabTime.setPreferredSize(new java.awt.Dimension(50, 25));

        javax.swing.GroupLayout jPanTimeLayout = new javax.swing.GroupLayout(jPanTime);
        jPanTime.setLayout(jPanTimeLayout);
        jPanTimeLayout.setHorizontalGroup(
            jPanTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 205, Short.MAX_VALUE)
            .addGroup(jPanTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanTimeLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabTime, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanTimeLayout.setVerticalGroup(
            jPanTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 208, Short.MAX_VALUE)
            .addGroup(jPanTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanTimeLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabTime, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanCenter.add(jPanTime);

        getContentPane().add(jPanCenter, java.awt.BorderLayout.CENTER);

        jlabRefreshrate.setText("Refreshrate : 1s");
        jPanNorth.add(jlabRefreshrate);
        jPanNorth.add(jSliTime);

        jlab1ms.setText("1ms");
        jPanNorth.add(jlab1ms);

        getContentPane().add(jPanNorth, java.awt.BorderLayout.PAGE_START);

        jPanEast.setLayout(new java.awt.GridBagLayout());

        jButConnection.setText("Connect");
        jButConnection.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jButConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButConnectionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanEast.add(jButConnection, gridBagConstraints);

        jButDisconnnect.setText("Disconnect");
        jButDisconnnect.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jButDisconnnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButDisconnnectActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanEast.add(jButDisconnnect, gridBagConstraints);

        jButStart.setText("Start");
        jButStart.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jButStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButStartActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanEast.add(jButStart, gridBagConstraints);

        jButStop.setText("Stop");
        jButStop.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jButStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButStopActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanEast.add(jButStop, gridBagConstraints);

        jButClear.setText("Clear");
        jButClear.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jButClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButClearActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanEast.add(jButClear, gridBagConstraints);

        jButEnd.setText("End");
        jButEnd.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jButEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButEndActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanEast.add(jButEnd, gridBagConstraints);

        getContentPane().add(jPanEast, java.awt.BorderLayout.EAST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButConnectionActionPerformed
        //Verbindung zu server herstellen
	// if ( resppnse = master) { dann soll eine verbingun aufgebaut werden
	//System.out.println("Button pressed " + Thread.currentThread());
	
	try {
	    worker = new MyConnectionWorker( "127.0.0.1" , 8080 );
	    worker.execute();
	    jButDisconnnect.setEnabled(true);
	    jButConnection.setEnabled(false);
	    jButStart.setEnabled(true);
	} catch (Exception ex) {
	    ex.printStackTrace();
	}
    }//GEN-LAST:event_jButConnectionActionPerformed

    private void jButDisconnnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButDisconnnectActionPerformed
        //Verbindung trennen
	
	jButClear.setEnabled(false);
	jButDisconnnect.setEnabled(false);
	jButStart.setEnabled(false);
	jButStop.setEnabled(false);
	jButEnd.setEnabled(false);
    }//GEN-LAST:event_jButDisconnnectActionPerformed

    private void jButStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButStartActionPerformed
	//Stoppuhr starten //swing worker einbauen //thread
	//ConnectionWorker worker = new ConnectionWorker();
	
	
	req.setStart(false);
	jButStop.setEnabled(false);//Stop button setzen
	jButClear.setEnabled(false);//clear button setzen
    }//GEN-LAST:event_jButStartActionPerformed

    private void jButStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButStopActionPerformed
        //Stopuhr anhalten
	req.setStop(false);
    }//GEN-LAST:event_jButStopActionPerformed

    private void jButClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButClearActionPerformed
        //Stoppuhr auf 0 setzen
	req.setClear(false);
    }//GEN-LAST:event_jButClearActionPerformed

    private void jButEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButEndActionPerformed
	//Server beenden
	req.setEnd(false);
    }//GEN-LAST:event_jButEndActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
	/* Set the Nimbus look and feel */
	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
	 */
	try {
	    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
		if ("Nimbus".equals(info.getName())) {
		    javax.swing.UIManager.setLookAndFeel(info.getClassName());
		    break;
		}
	    }
	} catch (ClassNotFoundException ex) {
	    java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (InstantiationException ex) {
	    java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (IllegalAccessException ex) {
	    java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (javax.swing.UnsupportedLookAndFeelException ex) {
	    java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	}
	//</editor-fold>

	/* Create and display the form */
	java.awt.EventQueue.invokeLater(new Runnable() {
	    public void run() {
		new Client().setVisible(true);
	    }
	});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButClear;
    private javax.swing.JButton jButConnection;
    private javax.swing.JButton jButDisconnnect;
    private javax.swing.JButton jButEnd;
    private javax.swing.JButton jButStart;
    private javax.swing.JButton jButStop;
    private javax.swing.JLabel jLabTime;
    private javax.swing.JPanel jPanCenter;
    private javax.swing.JPanel jPanEast;
    private javax.swing.JPanel jPanNorth;
    private javax.swing.JPanel jPanTime;
    private javax.swing.JSlider jSliTime;
    private javax.swing.JLabel jlab1ms;
    private javax.swing.JLabel jlabRefreshrate;
    // End of variables declaration//GEN-END:variables

    public void handleResponse(Response resp) {
   
    }

    private class MyConnectionWorker extends ConnectionWorker {
	private Response resp;
	private Socket socket;
	
	
	public MyConnectionWorker(String host, int port) throws IOException {
	    socket = new Socket(host ,port);
	}
	
	@Override
	protected String doInBackground() throws Exception {//hintergrund arbeiten // damit ich leichter auf die gui zugreifen kann
	    final Gson g = new Gson();//gson objekt
	    final BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));//herauslesenn
	    final OutputStreamWriter writer = new OutputStreamWriter(socket.getOutputStream());//hineinschrieben
	
	    while(true) {
		try {
		    final Request req = new Request();
		    final String reqString = g.toJson(req);
		    writer.write(reqString);
		    writer.flush();

		    final String respString = reader.readLine();
		    final Response resp = g.fromJson(respString, Response.class);
		    publish(resp);
		} catch (Exception ex) {
		    ex.printStackTrace();
		}
	    }
	}

	@Override
	protected void process(List<Response> list) {
	    Response resp = list.get(0);
	    
	    if(resp.isMaster()){
		jButConnection.setEnabled(false);
		jButClear.setEnabled(true);
		jButDisconnnect.setEnabled(true);
		jButStart.setEnabled(true);
		jButStop.setEnabled(true);
		jButEnd.setEnabled(true);
	    }
	    
	    if(resp.isRunning()){
		jLabTime.setText(String.format("%.3f", resp.getTime()));
	    }
	}
    }
}
